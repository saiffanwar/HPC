Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -std=c99 -fast -Wall -qopt-report=5 -qopt-report-phase=vec -restrict -o stencil

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(109,5) inlined into stencil.c(40,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(108,3) inlined into stencil.c(40,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(108,3) inlined into stencil.c(40,3)
      remark #15388: vectorization support: reference image[j+i*(ny+2)] has aligned access   [ stencil.c(110,7) ]
      remark #15388: vectorization support: reference tmp_image[j+i*(ny+2)] has aligned access   [ stencil.c(111,7) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.770 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(108,3) inlined into stencil.c(40,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference image[j+i*(ny+2)] has aligned access   [ stencil.c(110,7) ]
      remark #15388: vectorization support: reference tmp_image[j+i*(ny+2)] has aligned access   [ stencil.c(111,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(108,3) inlined into stencil.c(40,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(117,3) inlined into stencil.c(40,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (124:13) and image[j+i*(ny+2)] (124:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (124:13) and image[j+i*(ny+2)] (124:13)

   LOOP BEGIN at stencil.c(118,5) inlined into stencil.c(40,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (124:13) and image[j+i*(ny+2)] (124:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (124:13) and image[j+i*(ny+2)] (124:13)

      LOOP BEGIN at stencil.c(122,9) inlined into stencil.c(40,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (124:13) and image[j+i*(ny+2)] (124:13)
         remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (124:13) and image[j+i*(ny+2)] (124:13)

         LOOP BEGIN at stencil.c(123,11) inlined into stencil.c(40,3)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <image[j+i*(ny+2)]>, stride is unknown to compiler   [ stencil.c(124,13) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 5.500 
            remark #15478: estimated potential speedup: 0.720 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(123,11) inlined into stencil.c(40,3)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(45,3)
<Distributed chunk1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(45,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(45,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(45,3)
         <Distributed chunk1>
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)
            remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)

            LOOP BEGIN at stencil.c(44,3)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)
               remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(45,3)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)
                  remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)
               LOOP END
            LOOP END

            LOOP BEGIN at stencil.c(44,3)
            <Remainder>
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)
               remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(45,3)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)
                  remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[j+i*(ny+2)] (97:7) and tmp_image[j+i*(ny+2)] (97:7)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(45,3)
         <Remainder, Distributed chunk1>
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at stencil.c(44,3)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(45,3)
                  remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(97,7) ]
                  remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(97,7) ]
                  remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(97,37) ]
                  remark #15389: vectorization support: reference image[j+(i-1)*(ny+2)] has unaligned access   [ stencil.c(97,85) ]
                  remark #15389: vectorization support: reference image[j+(i+1)*(ny+2)] has unaligned access   [ stencil.c(97,133) ]
                  remark #15389: vectorization support: reference image[j-1+i*(ny+2)] has unaligned access   [ stencil.c(97,181) ]
                  remark #15389: vectorization support: reference image[j+1+i*(ny+2)] has unaligned access   [ stencil.c(97,229) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 8
                  remark #15309: vectorization support: normalized vectorization overhead 0.677
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15450: unmasked unaligned unit stride loads: 6 
                  remark #15451: unmasked unaligned unit stride stores: 1 
                  remark #15475: --- begin vector cost summary ---
                  remark #15476: scalar cost: 30 
                  remark #15477: vector cost: 3.870 
                  remark #15478: estimated potential speedup: 6.620 
                  remark #15488: --- end vector cost summary ---
               LOOP END

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(45,3)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(46,3)
<Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(46,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(46,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(46,3)
         <Distributed chunk2>
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)
            remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)

            LOOP BEGIN at stencil.c(44,3)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)
               remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(46,3)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)
                  remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)
               LOOP END
            LOOP END

            LOOP BEGIN at stencil.c(44,3)
            <Remainder>
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)
               remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(46,3)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)
                  remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (97:7) and image[j+i*(ny+2)] (97:7)
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at stencil.c(96,5) inlined into stencil.c(46,3)
         <Remainder, Distributed chunk2>
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at stencil.c(44,3)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(46,3)
                  remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(97,7) ]
                  remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(97,7) ]
                  remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(97,37) ]
                  remark #15389: vectorization support: reference tmp_image[j+(i-1)*(ny+2)] has unaligned access   [ stencil.c(97,85) ]
                  remark #15389: vectorization support: reference tmp_image[j+(i+1)*(ny+2)] has unaligned access   [ stencil.c(97,133) ]
                  remark #15389: vectorization support: reference tmp_image[j-1+i*(ny+2)] has unaligned access   [ stencil.c(97,181) ]
                  remark #15389: vectorization support: reference tmp_image[j+1+i*(ny+2)] has unaligned access   [ stencil.c(97,229) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 8
                  remark #15309: vectorization support: normalized vectorization overhead 0.677
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #15450: unmasked unaligned unit stride loads: 6 
                  remark #15451: unmasked unaligned unit stride stores: 1 
                  remark #15475: --- begin vector cost summary ---
                  remark #15476: scalar cost: 30 
                  remark #15477: vector cost: 3.870 
                  remark #15478: estimated potential speedup: 6.620 
                  remark #15488: --- end vector cost summary ---
               LOOP END

               LOOP BEGIN at stencil.c(95,3) inlined into stencil.c(46,3)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(151,5) inlined into stencil.c(55,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(150,3) inlined into stencil.c(55,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(150,3) inlined into stencil.c(55,3)
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(152,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 3.500
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 7.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(150,3) inlined into stencil.c(55,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(152,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 6.333
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(150,3) inlined into stencil.c(55,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(157,3) inlined into stencil.c(55,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(159,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (159:7) and call:fputc(int, FILE *) (159:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (159:7) and call:fputc(int, FILE *) (159:7)

   LOOP BEGIN at stencil.c(158,5) inlined into stencil.c(55,3)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(159,7) ]
   LOOP END
LOOP END
===========================================================================
