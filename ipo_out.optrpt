Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -std=c99 -fast -Wall -qopt-report=5 -pg -qopt-report-phase=vec -o stencil

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(83,5) inlined into stencil.c(40,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(82,3) inlined into stencil.c(40,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(82,3) inlined into stencil.c(40,3)
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(84,7) ]
      remark #15388: vectorization support: reference tmp_image[j+i*(ny+2)] has aligned access   [ stencil.c(85,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.406
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(82,3) inlined into stencil.c(40,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(84,7) ]
      remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(85,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.600
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(82,3) inlined into stencil.c(40,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(91,3) inlined into stencil.c(40,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(92,5) inlined into stencil.c(40,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(96,9) inlined into stencil.c(40,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(97,11) inlined into stencil.c(40,3)
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <image[j+i*(ny+2)]>, stride is unknown to compiler   [ stencil.c(98,13) ]
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15300: LOOP WAS VECTORIZED
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 3.000 
            remark #15478: estimated potential speedup: 1.320 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(97,11) inlined into stencil.c(40,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(44,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between tmp_image[i+j*(ny+2)] (68:7) and tmp_image[i+1+j*(ny+2)] (72:7)
   remark #15346: vector dependence: assumed ANTI dependence between tmp_image[i+1+j*(ny+2)] (72:7) and tmp_image[i+j*(ny+2)] (68:7)

   LOOP BEGIN at stencil.c(65,3) inlined into stencil.c(45,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[i+j*(ny+2)] (68:7) and tmp_image[i+j*(ny+2)] (72:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[i+j*(ny+2)] (72:7) and tmp_image[i+j*(ny+2)] (68:7)

      LOOP BEGIN at stencil.c(67,5) inlined into stencil.c(45,5)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[i+j*(ny+2)] (68:7) and tmp_image[i+j*(ny+2)] (72:7)
         remark #15346: vector dependence: assumed OUTPUT dependence between tmp_image[i+j*(ny+2)] (72:7) and tmp_image[i+j*(ny+2)] (68:7)
      LOOP END
   LOOP END

   LOOP BEGIN at stencil.c(65,3) inlined into stencil.c(46,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between image[i+j*(ny+2)] (68:7) and image[i+j*(ny+2)] (72:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between image[i+j*(ny+2)] (72:7) and image[i+j*(ny+2)] (68:7)

      LOOP BEGIN at stencil.c(67,5) inlined into stencil.c(46,5)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between image[i+j*(ny+2)] (68:7) and image[i+j*(ny+2)] (72:7)
         remark #15346: vector dependence: assumed OUTPUT dependence between image[i+j*(ny+2)] (72:7) and image[i+j*(ny+2)] (68:7)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(125,5) inlined into stencil.c(55,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(124,3) inlined into stencil.c(55,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(124,3) inlined into stencil.c(55,3)
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(126,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.450
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 4.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(124,3) inlined into stencil.c(55,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(126,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 5.333
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(124,3) inlined into stencil.c(55,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(131,3) inlined into stencil.c(55,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(133,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (133:7) and call:fputc(int, FILE *) (133:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (133:7) and call:fputc(int, FILE *) (133:7)

   LOOP BEGIN at stencil.c(132,5) inlined into stencil.c(55,3)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(133,7) ]
   LOOP END
LOOP END
===========================================================================
