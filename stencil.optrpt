Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -std=c99 -O3 -xHost -Wall -qopt-report=5 -qopt-report-phase=vec -o stencil

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(99,5) inlined into stencil.c(40,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(98,3) inlined into stencil.c(40,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(98,3) inlined into stencil.c(40,3)
      remark #15388: vectorization support: reference image[j+i*(ny+2)] has aligned access   [ stencil.c(100,7) ]
      remark #15388: vectorization support: reference tmp_image[j+i*(ny+2)] has aligned access   [ stencil.c(101,7) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 6.770 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(98,3) inlined into stencil.c(40,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference image[j+i*(ny+2)] has aligned access   [ stencil.c(100,7) ]
      remark #15388: vectorization support: reference tmp_image[j+i*(ny+2)] has aligned access   [ stencil.c(101,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(98,3) inlined into stencil.c(40,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(107,3) inlined into stencil.c(40,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (114:13) and image[j+i*(ny+2)] (114:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (114:13) and image[j+i*(ny+2)] (114:13)

   LOOP BEGIN at stencil.c(108,5) inlined into stencil.c(40,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (114:13) and image[j+i*(ny+2)] (114:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (114:13) and image[j+i*(ny+2)] (114:13)

      LOOP BEGIN at stencil.c(112,9) inlined into stencil.c(40,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (114:13) and image[j+i*(ny+2)] (114:13)
         remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*(ny+2)] (114:13) and image[j+i*(ny+2)] (114:13)

         LOOP BEGIN at stencil.c(113,11) inlined into stencil.c(40,3)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <image[j+i*(ny+2)]>, stride is unknown to compiler   [ stencil.c(114,13) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 5.500 
            remark #15478: estimated potential speedup: 0.720 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(113,11) inlined into stencil.c(40,3)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(44,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(69,3) inlined into stencil.c(45,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(70,5) inlined into stencil.c(45,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at stencil.c(70,5) inlined into stencil.c(45,3)
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(71,7) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(71,36) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(72,7) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(72,7) ]
         remark #15389: vectorization support: reference image[j+(i-1)*(ny+2)] has unaligned access   [ stencil.c(72,36) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(73,7) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(73,7) ]
         remark #15389: vectorization support: reference image[j+(i+1)*(ny+2)] has unaligned access   [ stencil.c(73,36) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(74,7) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(74,7) ]
         remark #15389: vectorization support: reference image[j-1+i*(ny+2)] has unaligned access   [ stencil.c(74,36) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(75,7) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(75,7) ]
         remark #15389: vectorization support: reference image[j+1+i*(ny+2)] has unaligned access   [ stencil.c(75,36) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.432
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 5 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 45 
         remark #15477: vector cost: 4.620 
         remark #15478: estimated potential speedup: 7.150 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at stencil.c(70,5) inlined into stencil.c(45,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at stencil.c(69,3) inlined into stencil.c(46,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(70,5) inlined into stencil.c(46,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at stencil.c(70,5) inlined into stencil.c(46,3)
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(71,7) ]
         remark #15389: vectorization support: reference tmp_image[j+i*(ny+2)] has unaligned access   [ stencil.c(71,36) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(72,7) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(72,7) ]
         remark #15389: vectorization support: reference tmp_image[j+(i-1)*(ny+2)] has unaligned access   [ stencil.c(72,36) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(73,7) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(73,7) ]
         remark #15389: vectorization support: reference tmp_image[j+(i+1)*(ny+2)] has unaligned access   [ stencil.c(73,36) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(74,7) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(74,7) ]
         remark #15389: vectorization support: reference tmp_image[j-1+i*(ny+2)] has unaligned access   [ stencil.c(74,36) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(75,7) ]
         remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(75,7) ]
         remark #15389: vectorization support: reference tmp_image[j+1+i*(ny+2)] has unaligned access   [ stencil.c(75,36) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.432
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 6 
         remark #15451: unmasked unaligned unit stride stores: 5 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 45 
         remark #15477: vector cost: 4.620 
         remark #15478: estimated potential speedup: 7.150 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at stencil.c(70,5) inlined into stencil.c(46,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(141,5) inlined into stencil.c(55,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(140,3) inlined into stencil.c(55,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(140,3) inlined into stencil.c(55,3)
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(142,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.208
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(139,18) ]
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 4.740 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(140,3) inlined into stencil.c(55,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image[j+i*(ny+2)] has unaligned access   [ stencil.c(142,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.000
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(139,18) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(140,3) inlined into stencil.c(55,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(147,3) inlined into stencil.c(55,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(149,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (149:7) and call:fputc(int, FILE *) (149:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (149:7) and call:fputc(int, FILE *) (149:7)

   LOOP BEGIN at stencil.c(148,5) inlined into stencil.c(55,3)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(149,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: stencil(const int, const int, const int, const int, float *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(69,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(70,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(70,5)
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(71,7) ]
      remark #15389: vectorization support: reference image[j+i*height] has unaligned access   [ stencil.c(71,36) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(72,7) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(72,7) ]
      remark #15389: vectorization support: reference image[j+(i-1)*height] has unaligned access   [ stencil.c(72,36) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(73,7) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(73,7) ]
      remark #15389: vectorization support: reference image[j+(i+1)*height] has unaligned access   [ stencil.c(73,36) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(74,7) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(74,7) ]
      remark #15389: vectorization support: reference image[j-1+i*height] has unaligned access   [ stencil.c(74,36) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(75,7) ]
      remark #15389: vectorization support: reference tmp_image[j+i*height] has unaligned access   [ stencil.c(75,7) ]
      remark #15389: vectorization support: reference image[j+1+i*height] has unaligned access   [ stencil.c(75,36) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.658
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 5 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 4.750 
      remark #15478: estimated potential speedup: 6.980 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(70,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: output_image(const char *, const int, const int, const int, const int, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(141,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(140,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(140,3)
      remark #15388: vectorization support: reference image[j+i*height] has aligned access   [ stencil.c(142,11) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.208
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(139,18) ]
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 4.740 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(140,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image[j+i*height] has unaligned access   [ stencil.c(142,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.000
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(139,18) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(140,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(147,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(149,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (149:7) and call:fputc(int, FILE *) (149:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) (149:7) and call:fputc(int, FILE *) (149:7)

   LOOP BEGIN at stencil.c(148,5)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(149,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: init_image(const int, const int, const int, const int, float *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (100:7) and image[j+i*height] (100:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (100:7) and image[j+i*height] (100:7)

   LOOP BEGIN at stencil.c(99,5)
   <Multiversioned v1>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.333
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 4.410 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(99,5)
   <Multiversioned v2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <image[j+i*height]>, stride is unknown to compiler   [ stencil.c(100,7) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <tmp_image[j+i*height]>, stride is unknown to compiler   [ stencil.c(101,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 11.000 
      remark #15478: estimated potential speedup: 0.630 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(99,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(107,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (114:13) and image[j+i*height] (114:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (114:13) and image[j+i*height] (114:13)

   LOOP BEGIN at stencil.c(108,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (114:13) and image[j+i*height] (114:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (114:13) and image[j+i*height] (114:13)

      LOOP BEGIN at stencil.c(112,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (114:13) and image[j+i*height] (114:13)
         remark #15346: vector dependence: assumed OUTPUT dependence between image[j+i*height] (114:13) and image[j+i*height] (114:13)

         LOOP BEGIN at stencil.c(113,11)
         <Multiversioned v1>
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.333
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 5.000 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(113,11)
         <Multiversioned v2>
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <image[j+i*height]>, stride is unknown to compiler   [ stencil.c(114,13) ]
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 5.500 
            remark #15478: estimated potential speedup: 0.720 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(113,11)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
